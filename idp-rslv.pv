set ignoreTypes = false.
(* set traceDisplay = long. *)

free c: channel.

type host.
type nonce.
type pkey.
type skey.
type idpQuery.
type cid.
type login.


(* Public key encryption *)
fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)),y) = x.


fun reqCid(cid): bitstring.
fun reqIdpQ(idpQuery): bitstring.
fun reqLogin(login): bitstring.


(* Secrecy assumptions *)
not attacker(new skU).
not attacker(new skA).
not attacker(new skSp1).
not attacker(new skIdp2).
not attacker(new skDApp).
not attacker(new skCC).


(* Honest host names *)
free U, Sp1, Idp1, DApp, Idp2, CC: host.

(* Private declaration *)
free encAtt, decAtt, selectAtt: bitstring [private].
free username, password: bitstring [private].
free samlResp, reqServ: bitstring [private].

fun hash(bitstring): bitstring.
free CID: bitstring [private].
free wayfPage: bitstring [private].

(* Secret declaration *)
free servAccReq : bitstring [private].
free IdpQData: idpQuery [private].
free LoginData: login [private].

free IdpList: bitstring [private].

free IdpAlive: host [private].

event endLoginReq(host, host, nonce).
event beginLoginReq(host, host, nonce).

event beginServReqVal(host, host, nonce).
event endServReqVal(host, host, nonce).

query user: host, sp1: host, nonce: nonce; event(endLoginReq(user, sp1, nonce)) ==> event(beginLoginReq(user, sp1, nonce)).
query user: host, sp1: host, nonce: nonce; event(endServReqVal(user, sp1, nonce)) ==> event(beginServReqVal(user, sp1, nonce)).

(* Secrecy query *)
query attacker(IdpAlive);
      attacker(password);
      attacker(username);
      attacker(samlResp);
      attacker(decAtt);
      attacker(CID).



(* A process *)
let processU(skU: skey, pkSp1: pkey, pkIdp2: pkey) = 

    in (c, 
            (
                xSp1: host, 
                xIdp1: host,
                xIdp2: host
            )
        );
	if (xSp1 = Sp1) && (xIdp1 = Idp1) && (xIdp2 = Idp2)then
	let pkU = pk(skU) in

    new N1: nonce;

    out (c,  
            (
                encrypt((N1, servAccReq), pkSp1)
            )
        );
    event beginLoginReq(U, xSp1, N1);

    
    in (c, (encM2: bitstring));

    let (=N1, =wayfPage) = decrypt(encM2, skU) in

    new N2: nonce;


    out (c,  
        (
                encrypt((N2, xIdp1), pkSp1)
        )
    );
    in (c, (encM10: bitstring));
    let (=N2, =xIdp2) = decrypt(encM10, skU) in

    new N6: nonce;
    out (c, (encrypt((N6, username, hash(password)), pkIdp2)));

    in (c, (encM16: bitstring));
    let (=N6, =decAtt) = decrypt(encM16, skU) in

    new N9: nonce;
    out (c, (encrypt((N9, selectAtt), pkIdp2)));

    in (c, (encM18: bitstring));
    let (=N9, =samlResp) = decrypt(encM18, skU) in

    out (c, (encrypt((N1, samlResp), pkSp1)));

    in (c, (encM20: bitstring));
    let (=N1, =reqServ) = decrypt(encM20, skU) in
    event endServReqVal(U, xSp1, N1);

    0.



(* U2 process *)
let processSp1(skSp1: skey, pkU: pkey, pkDApp: pkey) = 

    in (c, 
            (
                xU: host, 
                xDApp: host
            )
        );
	if (xU = U) && (xDApp = DApp) then
	let pkSp1 = pk(skSp1) in

    in (c, (encM1: bitstring));
    let (xN1: nonce, =servAccReq) = decrypt(encM1, skSp1) in

    out (c, (encrypt((xN1, wayfPage), pkU)));

    in (c, (encM3: bitstring));
    let (xN2: nonce, =Idp1) = decrypt(encM3, skSp1) in

    new N3: nonce;
    out (c, (encrypt((N3, Idp1), pkDApp)));

    out (c,  
            (
                encrypt((xN2, Idp2), pkU)
            )
        );

    
    in (c, (enc19: bitstring));

    let (=xN1, =samlResp) = decrypt(enc19, skSp1) in
    event beginServReqVal(xU, Sp1, xN1);
    out (c,  
            (
                encrypt((xN1, reqServ), pkU)
            )
        );
    event endLoginReq(xU, Sp1, xN1);

    0.



(* DApp process *)
let processDApp(skDApp: skey, pkSp1: pkey, pkCC: pkey, pkA: pkey, pkIdp2: pkey) = 
    in (c, 
            (
                xSp1: host, 
                xCC: host,
                xIdp1: host
            )
        );
	if (xSp1 = Sp1) && (xCC = CC) && (xIdp1 = Idp1) then
	let pkDApp = pk(skDApp) in

    in (c, (encM4: bitstring));
    let (xN3: nonce, =xIdp1) = decrypt(encM4, skDApp) in


    new N4: nonce;
    new cidReqD: cid;
    out (c, (encrypt((N4, encrypt((reqCid(cidReqD)), pkA)), pkCC)));

    in (c, (encM6: bitstring));
    let (=N4, =CID) = decrypt(encM6, skDApp) in


    new N5: nonce;
    out (c, (encrypt((N5, encrypt((reqIdpQ(IdpQData)), pkA)), pkCC)));

    in (c, (encM8: bitstring));
    let (=N5, =IdpList) = decrypt(encM8, skDApp) in

    out (c, (encrypt((xN3, IdpAlive), pkSp1)));

    in (c, encM12: bitstring);
    let (xN7: nonce, =username, xPass: bitstring) = decrypt(encM12, skDApp) in
    if (xPass = hash(password)) then
    
    new N8: nonce;
    out (c, (encrypt((N8, encrypt((reqLogin(LoginData)), pkA)), pkCC)));


    in (c, encM14: bitstring);
    let (=N8, =encAtt) = decrypt(encM14, skDApp) in

    out (c, (encrypt((xN7, encAtt), pkIdp2)));
    0.



(* S process *)
let processCC(skCC: skey, pkDApp: pkey) = 
    in (c, 
            (
                xDApp: host
            )
        );
	if (xDApp = DApp) then
	let pkCC = pk(skCC) in

    in (c, (encM5: bitstring));
    let (xN4: nonce, encReqForA: bitstring) = decrypt(encM5, skCC) in
    
    out (c, (encrypt((xN4, CID), pkDApp)));

    in (c, (encM7: bitstring));
    let (xN5: nonce, encReqForAQuery: bitstring) = decrypt(encM7, skCC) in

    out (c, (encrypt((xN5, IdpList), pkDApp)));

    in (c, (encM13: bitstring));
    let (xN8: nonce, encLogReqForA: bitstring) = decrypt(encM13, skCC) in

    out (c, (encrypt((xN8, encAtt), pkDApp)));

    0.



(* S process *)
let processIdp2(skIdp2: skey, pkDApp: pkey, pkU: pkey) = 
    in (c, 
            (
                xDApp: host,
                xU: host
            )
        );
	if (xDApp = DApp) && (xU = U) then
	let pkIdp2 = pk(skIdp2) in

    in (c, (encM11: bitstring));
    let (xN6: nonce, xPass: bitstring) = decrypt(encM11, skIdp2) in
    if (xPass = hash(password)) then
    
    new N7: nonce;
    out (c, (encrypt((N7, username, xPass), pkDApp)));

    in (c, (encM15: bitstring));
    let (=N7, =encAtt) = decrypt(encM15, skIdp2) in

    out (c, (encrypt((xN6, decAtt), pkU)));

    in (c, (encM17: bitstring));
    let (xN9: nonce, =selectAtt) = decrypt(encM17, skIdp2) in

    out (c, (encrypt((xN9, samlResp), pkU)));

    0.


(* Main process setup *)
process 
    new skA: skey;
	let pkA = pk(skA) in
        out(c, pkA);
    new skU: skey;
	let pkU = pk(skU) in
        out(c, pkA);
    new skSp1: skey;
	let pkSp1 = pk(skSp1) in
        out(c, pkSp1);
    new skIdp2: skey;
	let pkIdp2 = pk(skIdp2) in
        out(c, pkIdp2);
    new skDApp: skey;
	let pkDApp = pk(skDApp) in
	    out(c, pkDApp);
    new skCC: skey;
	let pkCC = pk(skCC) in
	    out(c, pkCC);
	(
          (* Launch an unbounded number of sessions of the data owner *)
          (!processU(skU, pkSp1, pkIdp2)) | 
          
          (* Launch an unbounded number of sessions of the IPFS node *)
          (!processDApp(skDApp, pkSp1, pkCC, pkA, pkIdp2)) |
          
          (* Launch an unbounded number of sessions of the DApp node without IPFS *)
	      (!processCC(skCC, pkDApp)) |

          (!processIdp2(skIdp2, pkDApp, pkU))
    )
